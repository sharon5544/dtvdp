FeedbackWindow.xaml
------------------- 
<Window x:Class="DTVPDProject.Pages.FeedbackWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
        Title="FeedbackWindow" Height="450" Width="800" WindowState="Maximized" Closing="Window_Closing_1">


    <Grid Margin="0,70,0,0">


        <Grid.ColumnDefinitions>

            <ColumnDefinition Width="83*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" MinHeight="40.06"/>
            <RowDefinition Height="Auto" MinHeight="33.96"/>
            <RowDefinition Height="Auto" MinHeight="30"/>
            <RowDefinition Height="Auto" MinHeight="43.92"/>
            <RowDefinition Height="Auto" MinHeight="79.96"/>
            <RowDefinition/>
            <RowDefinition Height="Auto" MinHeight="100.14"/>
        </Grid.RowDefinitions>

        <!-- Rating System -->
        <TextBlock Grid.Column="0" Grid.Row="0" Text="Rate your experience:" Margin="9,4,-9,29" Grid.RowSpan="2" FontSize="14"/>
        <ComboBox Grid.Column="0" x:Name="RatingComboBox" Margin="8,4,670,8" Grid.Row="1">
            <ComboBoxItem Content="1 star"/>
            <ComboBoxItem Content="2 stars"/>
            <ComboBoxItem Content="3 stars"/>
            <ComboBoxItem Content="4 stars"/>
            <ComboBoxItem Content="5 stars"/>
        </ComboBox>

        <!-- Feedback Form -->
        <TextBlock Grid.Column="0" Grid.Row="2" Text="Provide your feedback:" Margin="10,2,-10,0" FontSize="14"/>
        <TextBox Grid.Column="0" Grid.Row="3" x:Name="FeedbackTextBox" Margin="10,13,668,9"/>

        <!-- Specific Feedback Questions -->
        <TextBlock Grid.Column="0" Grid.Row="4" Text="Ease of use:" Margin="5,8,315,54" FontSize="14"/>
        <RadioButton Grid.Column="0" Grid.Row="4" x:Name="EaseOfUseRadioButton" Content="Easy" Margin="25,40,720,25" FontSize="14"/>
        <RadioButton Grid.Column="0" Grid.Row="4" x:Name="EaseOfUseRadioButton2" Content="Difficult" Margin="100,40,625,0" Height="25" VerticalAlignment="Top" FontSize="14"/>

        <!-- Open-Ended Questions -->
        <TextBlock Grid.Column="0" Grid.Row="5" Text="What did you like most about the digital twin creation process?" Margin="4,6,20,5" FontSize="14"/>
        <TextBox Grid.Column="0" Grid.Row="5" x:Name="OpenEndedQuestionTextBox" Margin="17,31,610,65" Grid.RowSpan="2"/>

        <!-- Submit Button -->
        <Button Grid.Row="6" x:Name="btnSubmitFeedBack" Content="Submit" Margin="750,26,15,25" Background="#FFC9EE3A" FontWeight="Bold" Click="btnSubmitFeedBack_Click_1"/>
        <TextBlock HorizontalAlignment="Center" Margin="0,-66,0,0" TextWrapping="Wrap" Text="FeedBack" VerticalAlignment="Top" Height="45" Width="790" FontWeight="Bold" FontSize="20" TextAlignment="Center" Background="#FF3CCE28"/>
    </Grid>
</Window>

FeedbackWindow.xaml.cs
-----------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using DTVPDProject.ViewModels;


// Add this namespace for MessageBox

namespace DTVPDProject.Pages
{
    public partial class FeedbackWindow : Window
    {
        public FeedbackWindow()
        {
            InitializeComponent();
            this.DataContext = ViewModelConfig.feedbackViewModel;

        }

        private void btnSubmitFeedBack_Click_1(object sender, RoutedEventArgs e)
        {
            ViewModelConfig.feedbackViewModel.SubmitCommand.Execute(null);
            MessageBox.Show("Feedback submitted successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void Window_Closing_1(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

FeedbackViewModel.cs
-----------------------
using DTVPDProject.Commands;
using DTVPDProject.ViewModels;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace DTVPDProject.ViewModels
{
   public class FeedbackViewModel : INotifyPropertyChanged
        {
            private string _rating;
            private string _feedback;
            private string _easeOfUse;
            private string _openEndedQuestion;

            public string Rating
            {
                get { return _rating; }
                set { _rating = value; OnPropertyChanged(); }
            }

            public string Feedback
            {
                get { return _feedback; }
                set { _feedback = value; OnPropertyChanged(); }
            }

            public string EaseOfUse
            {
                get { return _easeOfUse; }
                set { _easeOfUse = value; OnPropertyChanged(); }
            }

            public string OpenEndedQuestion
            {
                get { return _openEndedQuestion; }
                set { _openEndedQuestion = value; OnPropertyChanged(); }
            }

            public ICommand SubmitCommand { get; set; }

            public FeedbackViewModel()
            {
                SubmitCommand = new RelayCommand(SubmitFeedback);
            }

            private void SubmitFeedback()
            {
                // Handle feedback submission logic here
                // For example, you can save the feedback to a database or send it via email
                Console.WriteLine("Feedback submitted:");
                Console.WriteLine($"Rating: {Rating}");
                Console.WriteLine($"Feedback: {Feedback}");
                Console.WriteLine($"Ease of use: {EaseOfUse}");
                Console.WriteLine($"Open-ended question: {OpenEndedQuestion}");
            }

            public event PropertyChangedEventHandler PropertyChanged;

            protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public class RelayCommand : ICommand
        {
            private readonly Action _execute;
            private readonly Func<bool> _canExecute;

            public RelayCommand(Action execute, Func<bool> canExecute = null)
            {
                _execute = execute;
                _canExecute = canExecute;
            }

            public bool CanExecute(object parameter)
            {
                return _canExecute == null || _canExecute();
            }

            public void Execute(object parameter)
            {
                _execute();
            }

            public event EventHandler CanExecuteChanged
            {
                add { CommandManager.RequerySuggested += value; }
                remove { CommandManager.RequerySuggested -= value; }
            }
        }
    }




HelpandSupportWindow.xaml
----------------------------
<Window x:Class="DTVPDProject.Pages.HelpandSupportWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        mc:Ignorable="d"
       Title="Help and Support" Height="645" Width="800" WindowState="Maximized">


    <Grid>
        <!-- Header Text -->
        <TextBlock Text="Help and Support" TextAlignment="Center" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center"
                   Margin="0,10,0,570" Width="780" Background="#FF2B8020"/>

        <!-- TabControl for FAQs, Guides, and Tutorials -->
        <TabControl Margin="20,60,20,20">
            <!-- FAQs Tab -->
            <TabItem Header="FAQs" FontSize="14">
                <StackPanel>
                    <TextBlock Text="Frequently Asked Questions" FontSize="18" FontWeight="Bold" Margin="0,10,0,10" Height="26"/>
                    <ItemsControl ItemsSource="{Binding FAQs}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                               

                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock TextWrapping="Wrap" Text="Q.What is a digital twin?" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="A. A digital twin is a virtual replica of a physical system,
                               such as a semiconductor manufacturing facility. It allows users to simulate and analyze
                               the behavior of the system in a virtual environment." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="Q.How do I create a digital twin of my semiconductor manufacturing 
                               facility?" Height="25" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="A. To create a digital twin, you will need to provide data about your 
                               facility, such as its layout, equipment, and processes. Our application will then use this data to 
                               create a virtual model of your facility." Height="35"/>
                    <TextBlock TextWrapping="Wrap" Text="Q.What are the benefits of using a digital twin?" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="A. Using a digital twin can help you optimize your manufacturing processes,
                               reduce costs, and improve product quality. It can also help you identify potential problems before they occur." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="Q.How do I use the digital twin to simulate different scenarios?" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="A. To simulate different scenarios, you can use our application to create different 
                               virtual environments and run simulations. This will allow you to test different scenarios and see how they affect your manufacturing process.
" Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="Q.What kind of data can I use to create a digital twin?" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="A. You can use a variety of data to create a digital twin, including CAD files, sensor data,
                               and process data." Height="30"/>
                </StackPanel>
            </TabItem>

            <!-- Guides Tab -->
            <TabItem Header="Guides" FontSize="14">
                <StackPanel>
                    <TextBlock Text="User Guides" FontSize="18" FontWeight="Bold" Margin="0,10,0,10"/>
                    <ItemsControl ItemsSource="{Binding Guides}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock TextWrapping="Wrap" Text="1.Getting Started with Digital Twins" Height="22" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text=" This guide will walk you through the process of creating a digital twin of your 
                               semiconductor manufacturing facility. It will cover the data you need to provide, how to set up the virtual environment,
                               and how to run simulations." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="2.Optimizing Your Manufacturing Process with Digital Twins" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text=" This guide will show you how to use digital twins to optimize your manufacturing process.
                               It will cover topics such as identifying bottlenecks, optimizing workflows, and reducing costs." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="3.Using Digital Twins for Predictive Maintenance" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This guide will show you how to use digital twins for predictive maintenance. It will cover 
                               topics such as monitoring equipment health, identifying potential problems, and scheduling maintenance." Height="45"/>
                    <TextBlock TextWrapping="Wrap" Text="4. Creating Custom Scenarios with Digital Twins" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This guide will show you how to create custom scenarios with digital twins. It will cover
                               topics such as creating virtual environments, running simulations, and analyzing results.
" Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="5.Integrating Digital Twins with Other Tools and Systems" Height="25" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This guide will show you how to integrate digital twins with other tools and systems, such as
                               ERP systems, MES systems, and IoT devices." Height="40"/>
                </StackPanel>
            </TabItem>

            <!-- Tutorials Tab -->
            <TabItem Header="Tutorials" FontSize="14">
                <StackPanel>
                    <TextBlock Text="Tutorials" FontSize="18" FontWeight="Bold" Margin="0,10,0,10"/>
                    <ItemsControl ItemsSource="{Binding Tutorials}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock TextWrapping="Wrap" Text="1.Creating a Digital Twin of a Semiconductor Manufacturing Facility" Height="22" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This tutorial will walk you through the process of creating a digital twin of a semiconductor
                               manufacturing facility. It will cover the data you need to provide, how to set up the virtual environment, and how to run simulations." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="2.Simulating Different Scenarios with Digital Twins" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text=" This tutorial will show you how to simulate different scenarios with digital twins. It will
                               cover topics such as creating virtual environments, running simulations, and analyzing results." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="3.Using Digital Twins for Root Cause Analysis" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This tutorial will show you how to use digital twins for root cause analysis. It will cover
                               topics such as identifying problems, analyzing data, and identifying solutions." Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="4.Creating Custom Dashboards with Digital Twins" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This tutorial will show you how to create custom dashboards with digital twins. It will cover 
                               topics such as creating virtual environments, running simulations, and analyzing results.
" Height="40"/>
                    <TextBlock TextWrapping="Wrap" Text="5.Using Digital Twins for Training and Education" Height="20" FontWeight="Bold"/>
                    <TextBlock TextWrapping="Wrap" Text="This tutorial will show you how to use digital twins for training and education. It will cover
                               topics such as creating virtual environments, running simulations, and analyzing results." Height="40"/>
                </StackPanel>
            </TabItem>
        </TabControl>

        <!-- Contact Information -->
        <StackPanel VerticalAlignment="Bottom" Margin="30,0,20,1" Height="89">
            <TextBlock Text="Contact Technical Support" FontSize="18" FontWeight="Bold"/>
            <TextBlock Text="Email: support@yourapp.com"/>
            <TextBlock Text="Phone: +1-234-567-890"/>
        </StackPanel>
    </Grid>
</Window>

HelpandSupportWindow.xaml.cs
----------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using DTVPDProject.ViewModels;

namespace DTVPDProject.Pages
{
    /// <summary>
    /// Interaction logic for HelpandSupportWindow.xaml
    /// </summary>
    public partial class HelpandSupportWindow : Window
    {
        public HelpandSupportWindow()
        {
            InitializeComponent();
            this.DataContext = ViewModelConfig.helpViewModel;

        }
    }
}

HelpandSupportViewModel.cs
----------------------------
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace DTVPDProject.ViewModels
{
    public class HelpAndSupportViewModel : INotifyPropertyChanged
    {
        // FAQs collection
        public ObservableCollection<string> FAQs { get; set; }

        // Guides collection
        public ObservableCollection<string> Guides { get; set; }

        // Tutorials collection
        public ObservableCollection<string> Tutorials { get; set; }

        public HelpAndSupportViewModel()
        {
            // Sample data for FAQs
            FAQs = new ObservableCollection<string>
            {
                "What is a digital twin?",
                "How do I set up the product visualization?",
                "How can I run a simulation?"
            };

            // Sample data for Guides
            Guides = new ObservableCollection<string>
            {
                "Guide 1: Setting up your project",
                "Guide 2: Configuring simulations",
                "Guide 3: Visualization options"
            };

            // Sample data for Tutorials
            Tutorials = new ObservableCollection<string>
            {
                "Tutorial 1: Introduction to Digital Twins",
                "Tutorial 2: Creating a new simulation",
                "Tutorial 3: Analyzing simulation results"
            };
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


PerformanceAnalysisWindow.xaml
---------------------------------
<Window x:Class="DTVPDProject.Pages.PerformanceAnalysisWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
        xmlns:helix="http://helix-toolkit.org/wpf"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"     
        xmlns:local="clr-namespace:DTVPDProject.Pages"
        Title="PerformanceAnalysisPageWindow" Height="590" Width="826" Closing="Window_Closing" WindowState="Maximized">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" MinHeight="124.16"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <!-- Simulation Results Overview -->
        <StackPanel Grid.Column="0" Grid.Row="0" Margin="10,10,10,10">
            <TextBlock FontWeight="Bold" FontSize="16" Height="24">Simulation Results Overview</TextBlock>
            <TextBlock >Simulation ID: <Run Text="{Binding SimulationId}"/></TextBlock>
            <TextBlock>Start Time: <Run Text="{Binding StartTime}"/></TextBlock>
            <TextBlock>End Time: <Run Text="{Binding EndTime}"/></TextBlock>
            <TextBlock>Status: <Run Text="{Binding Status}"/></TextBlock>
        </StackPanel>

        <!-- Performance Metrics -->
        <DataGrid Grid.Column="0" Grid.Row="1" Margin="10,10,10,10" AutoGenerateColumns="False" ItemsSource="{Binding Metrics}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Metric  Name" Binding="{Binding MetricName}"/>
                <DataGridTextColumn Header="Metric Value" Binding="{Binding MetricValue}"/>
                <DataGridTextColumn Header="Unit" Binding="{Binding Unit}"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- Interactive Visualizations -->
        <Grid Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Margin="10,10,10,10">
            <Grid.RowDefinitions>
                <RowDefinition Height="389*"/>
                <RowDefinition Height="165*"/>
            </Grid.RowDefinitions>
            <StackPanel Grid.RowSpan="2" Margin="2,0,0,5">
                <Button x:Name="btnLineChart" Content="Show Line Chart" Click="btnLineChart_Click"/>
                <Button x:Name="btnBarChart" Content="Show Bar Chart" Click="btnBarChart_Click"/>
                <Button x:Name="btnThreeD" Content="Show 3D Rendering" Click="btnThreeD_Click"/>

                <!-- LiveCharts Chart -->
                <lvc:CartesianChart x:Name="cartesianChart" Width="386" Height="255" />
                <helix:HelixViewport3D x:Name="viewport" Width="384" Height="226"/>

                <!-- Helix Toolkit 3D Viewport -->
            </StackPanel>
        </Grid>
    </Grid>


</Window>

PerformanceAnalysisWindow.xaml.cs
---------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using LiveCharts;
using LiveCharts.Wpf;
using System.Windows.Media.Media3D;
using HelixToolkit.Wpf;
using DTVPDProject.ViewModels;

namespace DTVPDProject.Pages
{
    /// <summary>
    /// Interaction logic for PerformanceAnalysisPageWindow.xaml
    /// </summary>
    public partial class PerformanceAnalysisWindow : Window
    {
        public PerformanceAnalysisWindow()
        {
            InitializeComponent();
            this.DataContext = ViewModelConfig.performanceViewModel; // Set ViewModel as DataContext

        }

       
           

       

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {

        }

        private void btnLineChart_Click(object sender, RoutedEventArgs e)
        {
            // Example data for the line chart
            var values = new ChartValues<double> { 3, 5, 7, 4 };
            var lineSeries = new LineSeries
            {
                Title = "Line Chart",
                Values = values
            };
            cartesianChart.Series.Clear();
            cartesianChart.Series.Add(lineSeries);
        }

        private void btnBarChart_Click(object sender, RoutedEventArgs e)
        {
            // Example data for the bar chart
            var values = new ChartValues<double> { 4, 6, 3, 8 };
            var barSeries = new ColumnSeries
            {
                Title = "Bar Chart",
                Values = values
            };
            cartesianChart.Series.Clear();
            cartesianChart.Series.Add(barSeries);
        }

        private void btnThreeD_Click(object sender, RoutedEventArgs e)
        {
            // Clear previous 3D content
            viewport.Children.Clear();

            // Create a 3D mesh (example: a simple cube)
            var meshBuilder = new MeshBuilder();

            // Define the vertices of the cube
            meshBuilder.AddBox(new Point3D(0, 0, 0), 1, 1, 1);

            // Create the mesh geometry
            var mesh = meshBuilder.ToMesh();

            // Create a material for the cube
            var material = new DiffuseMaterial(new SolidColorBrush(Colors.Blue));

            // Create a model visual for the cube
            var model = new GeometryModel3D
            {
                Geometry = mesh,
                Material = material
            };

            // Add the model to the viewport
            viewport.Children.Add(new ModelVisual3D { Content = model });

            // Set the camera position and orientation
            viewport.Camera.Position = new Point3D(3, 3, 3);
            viewport.Camera.LookDirection = new Vector3D(-1, -1, -1);

        }
    }
}

PerformanceViewModel.cs
------------------------

using HelixToolkit.Wpf;
using LiveCharts.Wpf;
using LiveCharts;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media.Media3D;
using LiveCharts.Configurations;
using System.Collections.ObjectModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;


namespace DTVPDProject.ViewModels
{
    public class PerformanceViewModel : INotifyPropertyChanged
    {

        // Properties for Line Chart

        private string _simulationId;
            private DateTime _startTime;
            private DateTime _endTime;
            private string _status;
            private ObservableCollection<Metric> _metrics;
            private SeriesCollection _seriesCollection;
            private ChartValues<double> _lineChartValues;
            private ChartValues<double> _barChartValues;

            public PerformanceViewModel()
            {

                Metrics = new ObservableCollection<Metric>();
                SeriesCollection = new SeriesCollection();
                LineChartValues = new ChartValues<double>();
                BarChartValues = new ChartValues<double>();

                // Initialize the chart configurations
                var mapper = Mappers.Xy<double>()
                    .X(x => x)
                    .Y(x => x);

                Charting.For<double>(mapper);
            }

            public string SimulationId
            {
                get { return _simulationId; }
                set
                {
                    _simulationId = value;
                    OnPropertyChanged();
                }
            }

            public DateTime StartTime
            {
                get { return _startTime; }
                set
                {
                    _startTime = value;
                    OnPropertyChanged();
                }
            }

            public DateTime EndTime
            {
                get { return _endTime; }
                set
                {
                    _endTime = value;
                    OnPropertyChanged();
                }
            }

            public string Status
            {
                get { return _status; }
                set
                {
                    _status = value;
                    OnPropertyChanged();
                }
            }

            public ObservableCollection<Metric> Metrics
            {
                get { return _metrics; }
                set
                {
                    _metrics = value;
                    OnPropertyChanged();
                }
            }

            public SeriesCollection SeriesCollection
            {
                get { return _seriesCollection; }
                set
                {
                    _seriesCollection = value;
                    OnPropertyChanged();
                }
            }

            public ChartValues<double> LineChartValues
            {
                get { return _lineChartValues; }
                set
                {
                    _lineChartValues = value;
                    OnPropertyChanged();
                }
            }

            public ChartValues<double> BarChartValues
            {
                get { return _barChartValues; }
                set
                {
                    _barChartValues = value;
                    OnPropertyChanged();
                }
            }

            public ICommand ShowLineChartCommand { get; set; }
            public ICommand ShowBarChartCommand { get; set; }
            public ICommand Show3DRenderingCommand { get; set; }

            public event PropertyChangedEventHandler PropertyChanged;

            protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public class Metric
        {
            public string MetricName { get; set; }
            public double MetricValue { get; set; }
            public string Unit { get; set; }
        }
    }






            






